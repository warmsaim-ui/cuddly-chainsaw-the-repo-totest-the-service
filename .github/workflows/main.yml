name: Setup ngrok and Remote Desktop

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup-ngrok:
    runs-on: windows-latest
    timeout-minutes: 360  # GitHub Actions max limit

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download ngrok
        run: |
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
          if (!(Test-Path -Path ngrok.zip)) { throw "Failed to download ngrok" }

      - name: Extract ngrok
        run: |
          Expand-Archive ngrok.zip -DestinationPath .
          if (!(Test-Path -Path .\ngrok.exe)) { throw "Failed to extract ngrok" }

      - name: Update ngrok
        run: .\ngrok.exe update

      - name: Authenticate with ngrok
        run: .\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Enable Remote Desktop
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
          if (!(Get-LocalUser -Name "runneradmin")) { throw "Failed to create user" }

      - name: Start ngrok tunnel and show RDP info
        run: |
          # Start ngrok in background
          Start-Process -NoNewWindow -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389"
          Start-Sleep -Seconds 5  # wait a bit for tunnel to initialize

          # Get public ngrok endpoint
          $retry = 0
          $tcpUrl = ""
          while ($retry -lt 10) {
            try {
              $tunnelStatus = Invoke-RestMethod http://localhost:4040/api/tunnels -ErrorAction SilentlyContinue
              if ($tunnelStatus.tunnels) {
                $tcpUrl = $tunnelStatus.tunnels | Where-Object { $_.proto -eq "tcp" } | Select-Object -ExpandProperty public_url
                if ($tcpUrl) { break }
              }
            } catch { }
            Start-Sleep -Seconds 2
            $retry++
          }

          if (-not $tcpUrl) {
            throw "Could not get ngrok endpoint"
          }

          $rdpAddress = $tcpUrl -replace '^tcp://',''
          Write-Host "==============================================="
          Write-Host "Ngrok RDP Address : $rdpAddress"
          Write-Host "Username          : runneradmin"
          Write-Host "Password          : P@ssw0rd!"
          Write-Host "==============================================="
          Write-Host "ARCHITECT : MUDASIR-YT"

          # Infinite loop to keep workflow alive
          Write-Host "Workflow will now stay alive to keep ngrok tunnel active..."
          while ($true) {
            Start-Sleep -Seconds 300
          }
